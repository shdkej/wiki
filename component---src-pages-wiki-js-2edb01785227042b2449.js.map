{"version":3,"file":"component---src-pages-wiki-js-2edb01785227042b2449.js","mappings":"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","sources":["webpack://sh-wiki/./src/components/box.js","webpack://sh-wiki/./src/pages/wiki.js"],"sourcesContent":["import React from \"react\";\nimport { Link, StaticQuery, graphql } from \"gatsby\";\n\nclass Box extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: \"\",\n            result: [],\n        };\n    }\n\n    ch2pattern = (ch) => {\n        const offset = 44032;\n        if (/[가-힣]/.test(ch)) {\n            const chCode = ch.charCodeAt(0) - offset;\n            if (chCode % 28 > 0) {\n                return ch;\n            }\n            const begin = Math.floor(chCode / 28) * 28 + offset;\n            const end = begin + 27;\n            return `[\\\\u${begin.toString(16)}-\\\\u${end.toString(16)}]`;\n        }\n\n        if (/[ㄱ-ㅎ]/.test(ch)) {\n            const con2syl = {\n                ㄱ: \"가\".charCodeAt(0),\n                ㄲ: \"까\".charCodeAt(0),\n                ㄴ: \"나\".charCodeAt(0),\n                ㄷ: \"다\".charCodeAt(0),\n                ㄸ: \"따\".charCodeAt(0),\n                ㄹ: \"라\".charCodeAt(0),\n                ㅁ: \"마\".charCodeAt(0),\n                ㅂ: \"바\".charCodeAt(0),\n                ㅃ: \"빠\".charCodeAt(0),\n                ㅅ: \"사\".charCodeAt(0),\n            };\n            const begin =\n                con2syl[ch] || (ch.charCodeAt(0) - 12613) * 588 + con2syl[\"ㅅ\"];\n            const end = begin + 587;\n            return `[${ch}\\\\u${begin.toString(16)}-\\\\u${end.toString(16)}]`;\n        }\n\n        return this.escapeRegExp(ch);\n    };\n\n    createFuzzyMatcher(input) {\n        const pattern = input\n            .split(\"\")\n            .map(this.ch2pattern)\n            .map((pattern) => \"(\" + pattern + \")\")\n            .join(\".*?\");\n        return new RegExp(pattern);\n    }\n\n    escapeRegExp = (ch) => {\n        const reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n        const reHasRegExpChar = RegExp(reRegExpChar.source);\n        return ch && reHasRegExpChar.test(ch)\n            ? ch.replace(reRegExpChar, \"\\\\$&\")\n            : ch || \"\";\n    };\n\n    onQuery = (event, data) => {\n        const text = event.target.value;\n\n        this.setState({\n            text: text,\n        });\n\n        const regex = this.createFuzzyMatcher(text);\n        const result = data.allMarkdownRemark.nodes\n            .filter((node) => {\n                return regex.test(node.rawMarkdownBody);\n            })\n            .map((node) => {\n                return node;\n            });\n\n        this.setState({\n            result: result,\n        });\n    };\n\n    render() {\n        return (\n            <StaticQuery\n                query={graphql`\n                    query {\n                        allMarkdownRemark {\n                            nodes {\n                                fields {\n                                    slug\n                                }\n                                rawMarkdownBody\n                            }\n                        }\n                    }\n                `}\n                render={(data) => (\n                    <div>\n                        <span>Fuzzy Finder :</span>\n                        <input\n                            type=\"text\"\n                            name=\"search\"\n                            value={this.state.text}\n                            onChange={(event) => this.onQuery(event, data)}\n                        />\n                        {this.state.result.length > 0 ? (\n                            this.state.result.map((key, i) => {\n                                return (\n                                    <div\n                                        key={i}\n                                        style={{\n                                            background: `lightgrey`,\n                                            margin: `5px`,\n                                            width: `70%`,\n                                            color: `black`,\n                                        }}\n                                    >\n                                        <Link to={key.fields.slug}>\n                                            {key.fields.slug}\n                                        </Link>\n                                        {key.rawMarkdownBody.split(\" \")[0]}\n                                    </div>\n                                );\n                            })\n                        ) : (\n                            <div>\"empty\"</div>\n                        )}\n                    </div>\n                )}\n            />\n        );\n    }\n}\n\nexport default Box;\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Box from \"../components/box\"\n\nconst WikiPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <Layout title={title}>\n    <h1>Index</h1>\n    <div className=\"\">\n      <Box />\n      {group.map(tag => (\n        <div className=\"\">\n          {tag.fieldValue}\n          <ul>\n            {tag.nodes.map(node => (\n              <li>\n                <Link to={node.fields.slug} key={tag.fieldValue}>\n                  {node.frontmatter.title}(\n                  {node.timeToRead > 30 ? (\n                    <span style={{ color: `purple` }}>{node.timeToRead}</span>\n                  ) : (\n                    node.timeToRead\n                  )}\n                  min)\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n      <div className=\"square-center\">Evolve</div>\n    </div>\n  </Layout>\n)\n\nexport default WikiPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        nodes {\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_React$Component","Box","props","_this","call","ch2pattern","ch","test","chCode","charCodeAt","begin","Math","floor","end","toString","con2syl","ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","escapeRegExp","reRegExpChar","reHasRegExpChar","RegExp","source","replace","onQuery","event","data","text","target","value","setState","regex","createFuzzyMatcher","result","allMarkdownRemark","nodes","filter","node","rawMarkdownBody","map","state","_inheritsLoose","_proto","prototype","input","pattern","split","this","join","render","React","StaticQuery","query","type","name","onChange","length","key","i","style","background","margin","width","color","Link","to","fields","slug","_ref","group","site","siteMetadata","title","Layout","className","tag","fieldValue","frontmatter","timeToRead"],"sourceRoot":""}